/*
    Renderer.cpp
    Copyright (c) 2023-2023 Zekronz - MIT License
    https://github.com/Zekronz/Zixel-Engine
*/

#include "Engine/ZixelPCH.h"
#include "Engine/Renderer.h"
#include "Engine/KeyCodes.h"
#include "Engine/Math.h"
#include "Engine/StringHelper.h"
#include "Engine/ResourceManager.h"
#include "Engine/Surface.h"
#include "Engine/Texture.h"
#include "Engine/TextureAtlas.h"
#include "Engine/Shader.h"

namespace Zixel {

	Renderer::Renderer() {
		quadMat = glm::mat4(1.0f);
	}

	Renderer::~Renderer() {

		if (quadVBO != 0) {
			glDeleteBuffers(1, &quadVBO);
		}

		if (quadVAO != 0) {
			glDeleteVertexArrays(1, &quadVAO);
		}

		if (quadEBO != 0) {
			glDeleteBuffers(1, &quadEBO);
		}

		if (quadShader != nullptr) {
			delete quadShader;
		}

		if (initialized) {

			if (targetSurface != nullptr) {
				unbindSurface();
			}

			ZIXEL_INFO("Destroyed renderer.");

		}

	}

	bool Renderer::init(GLFWwindow* _window) {

		if (initialized) {

			ZIXEL_WARN("Renderer already initialized.");
			return true;

		}

		window = _window;

		//Set up default OpenGL state.
		glfwGetWindowSize(window, &windowWidth, &windowHeight);

		glViewport(0, 0, windowWidth, windowHeight);

		glDisable(GL_DEPTH_TEST);
		glDisable(GL_CULL_FACE);
		glEnable(GL_BLEND);

		//glCullFace(GL_BACK);
		//glFrontFace(GL_CCW);
		defaultBlendMode();

		//Create quad vertex buffer.
		/*f32 vertices[] = {
			0.0f, 1.0f, 0.0f, 1.0f,
			1.0f, 0.0f, 1.0f, 0.0f,
			0.0f, 0.0f, 0.0f, 0.0f,

			0.0f, 1.0f, 0.0f, 1.0f,
			1.0f, 1.0f, 1.0f, 1.0f,
			1.0f, 0.0f, 1.0f, 0.0f
		};*/

		f32 vertices[] = {
			0.0f, 1.0f, 0.0f,
			1.0f, 1.0f, 0.0f,
			0.0f, 0.0f, 0.0f,
			1.0f, 0.0f, 0.0f,
		};

		u32 indices[] = {
			0, 1, 2,
			1, 3, 2,
		};

		glGenBuffers(1, &quadVBO);
		if (quadVBO == 0) {
			ZIXEL_CRITICAL("Error error generating VBO.");
			return false;
		}

		glGenVertexArrays(1, &quadVAO);
		if (quadVAO == 0) {
			ZIXEL_CRITICAL("Error error generating VAO.");
			return false;
		}

		glGenBuffers(1, &quadEBO);
		if (quadEBO == 0) {
			ZIXEL_CRITICAL("Error error generating EBO.");
			return false;
		}

		glBindVertexArray(quadVAO);
		glBindBuffer(GL_ARRAY_BUFFER, quadVBO);
		glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, quadEBO);
		glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(f32), (void*)0);
		glBindVertexArray(0);
		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
		glBindBuffer(GL_ARRAY_BUFFER, 0);

		ZIXEL_INFO("Set up quad VBO and VAO.");

		//Load quad shader.
		quadShader = new Shader();

		if (!quadShader->loadFromFile("Zixel-Engine/Engine/Data/Shaders/quadVert.glsl", "Zixel-Engine/Engine/Data/Shaders/quadFrag.glsl")) {

			delete quadShader;
			quadShader = nullptr;

			return false;

		}

		setDefaultShader();

		//Create standard cursors.
		cursorIBeam = glfwCreateStandardCursor(GLFW_IBEAM_CURSOR);
		cursorCrosshair = glfwCreateStandardCursor(GLFW_CROSSHAIR_CURSOR);
		cursorHand = glfwCreateStandardCursor(GLFW_HAND_CURSOR);

		//Create invalid cursor.
		u8 pixelsInvalid[16 * 16 * 4] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 40, 255, 0, 0, 131, 255, 0, 0, 179, 255, 0, 0, 235, 255, 0, 0, 227, 255, 0, 0, 175, 255, 0, 0, 124, 255, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 108, 255, 1, 1, 244, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 1, 1, 248, 255, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 163, 255, 0, 0, 255, 255, 0, 0, 255, 255, 88, 88, 255, 255, 175, 175, 255, 255, 227, 227, 255, 255, 227, 227, 255, 255, 175, 175, 255, 255, 100, 100, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 183, 255, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 108, 255, 0, 0, 255, 255, 24, 24, 255, 255, 187, 187, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 243, 243, 255, 255, 44, 44, 255, 255, 1, 1, 255, 255, 0, 0, 255, 255, 0, 0, 116, 0, 0, 0, 0, 255, 0, 0, 40, 255, 1, 1, 244, 255, 0, 0, 255, 255, 187, 187, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 243, 243, 255, 255, 60, 60, 255, 255, 0, 0, 255, 255, 29, 29, 255, 255, 0, 0, 255, 255, 1, 1, 248, 255, 0, 0, 40, 255, 0, 0, 131, 255, 0, 0, 255, 255, 88, 88, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 243, 243, 255, 255, 60, 60, 255, 255, 0, 0, 255, 255, 40, 40, 255, 255, 231, 231, 255, 255, 104, 104, 255, 255, 0, 0, 255, 255, 0, 0, 124, 255, 0, 0, 179, 255, 0, 0, 255, 255, 175, 175, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 243, 243, 255, 255, 60, 60, 255, 255, 0, 0, 255, 255, 40, 40, 255, 255, 231, 231, 255, 255, 255, 255, 255, 255, 179, 179, 255, 255, 0, 0, 255, 255, 0, 0, 175, 255, 0, 0, 235, 255, 0, 0, 255, 255, 227, 227, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 243, 243, 255, 255, 60, 60, 255, 255, 0, 0, 255, 255, 40, 40, 255, 255, 231, 231, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 235, 235, 255, 255, 0, 0, 255, 255, 0, 0, 227, 255, 0, 0, 235, 255, 0, 0, 255, 255, 227, 227, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 243, 243, 255, 255, 60, 60, 255, 255, 0, 0, 255, 255, 40, 40, 255, 255, 231, 231, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 235, 235, 255, 255, 0, 0, 255, 255, 0, 0, 227, 255, 0, 0, 179, 255, 0, 0, 255, 255, 175, 175, 255, 255, 255, 255, 255, 255, 243, 243, 255, 255, 60, 60, 255, 255, 0, 0, 255, 255, 40, 40, 255, 255, 231, 231, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 183, 183, 255, 255, 0, 0, 255, 255, 0, 0, 175, 255, 0, 0, 131, 255, 0, 0, 255, 255, 100, 100, 255, 255, 243, 243, 255, 255, 60, 60, 255, 255, 0, 0, 255, 255, 40, 40, 255, 255, 231, 231, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 112, 112, 255, 255, 0, 0, 255, 255, 0, 0, 124, 255, 0, 0, 40, 255, 1, 1, 248, 255, 0, 0, 255, 255, 44, 44, 255, 255, 0, 0, 255, 255, 40, 40, 255, 255, 231, 231, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 195, 195, 255, 255, 4, 4, 255, 255, 1, 1, 248, 255, 0, 0, 40, 0, 0, 0, 0, 255, 0, 0, 112, 255, 0, 0, 255, 255, 1, 1, 255, 255, 29, 29, 255, 255, 231, 231, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 195, 195, 255, 255, 24, 24, 255, 255, 0, 0, 255, 255, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 183, 255, 0, 0, 255, 255, 0, 0, 255, 255, 108, 108, 255, 255, 179, 179, 255, 255, 235, 235, 255, 255, 235, 235, 255, 255, 183, 183, 255, 255, 112, 112, 255, 255, 4, 4, 255, 255, 0, 0, 255, 255, 0, 0, 187, 255, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 4, 255, 0, 0, 116, 255, 1, 1, 248, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 0, 0, 255, 255, 1, 1, 248, 255, 0, 0, 116, 255, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 40, 255, 0, 0, 131, 255, 0, 0, 179, 255, 0, 0, 235, 255, 0, 0, 227, 255, 0, 0, 175, 255, 0, 0, 124, 255, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

		GLFWimage image;

		image.width = 16;
		image.height = 16;
		image.pixels = pixelsInvalid;

		cursorInvalid = glfwCreateCursor(&image, 8, 8);

		//Create size west-east cursor.
		u8 pixelsSizeWE[23 * 9 * 4] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 55, 3, 3, 3, 189, 3, 3, 3, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 189, 3, 3, 3, 189, 6, 6, 6, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 55, 3, 3, 3, 189, 255, 255, 255, 255, 1, 1, 1, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 255, 241, 241, 241, 255, 3, 3, 3, 189, 6, 6, 6, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 55, 3, 3, 3, 189, 255, 255, 255, 255, 255, 255, 255, 255, 1, 1, 1, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 255, 255, 255, 255, 255, 237, 237, 237, 255, 3, 3, 3, 189, 6, 6, 6, 55, 0, 0, 0, 0, 6, 6, 6, 55, 3, 3, 3, 189, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 255, 255, 255, 255, 255, 255, 255, 255, 233, 233, 233, 255, 3, 3, 3, 189, 6, 6, 6, 55, 3, 3, 3, 189, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 233, 233, 233, 255, 3, 3, 3, 189, 6, 6, 6, 55, 3, 3, 3, 189, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 3, 3, 3, 189, 255, 255, 255, 255, 255, 255, 255, 255, 233, 233, 233, 255, 3, 3, 3, 189, 6, 6, 6, 55, 0, 0, 0, 0, 6, 6, 6, 55, 3, 3, 3, 189, 255, 255, 255, 255, 255, 255, 255, 255, 1, 1, 1, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 255, 255, 255, 255, 255, 233, 233, 233, 255, 3, 3, 3, 189, 6, 6, 6, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 55, 3, 3, 3, 189, 255, 255, 255, 255, 1, 1, 1, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 255, 233, 233, 233, 255, 3, 3, 3, 189, 6, 6, 6, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 55, 3, 3, 3, 189, 3, 3, 3, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 189, 3, 3, 3, 189, 6, 6, 6, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

		image.width = 23;
		image.height = 9;
		image.pixels = pixelsSizeWE;

		cursorSizeWE = glfwCreateCursor(&image, 11, 4);

		//Create size north-south cursor.
		u8 pixelsSizeNS[9 * 23 * 4] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 55, 3, 3, 3, 189, 6, 6, 6, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 55, 3, 3, 3, 189, 255, 255, 255, 255, 3, 3, 3, 189, 6, 6, 6, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 55, 3, 3, 3, 189, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 3, 3, 3, 189, 6, 6, 6, 55, 0, 0, 0, 0, 6, 6, 6, 55, 3, 3, 3, 189, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 3, 3, 3, 189, 6, 6, 6, 55, 3, 3, 3, 189, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 3, 3, 3, 189, 3, 3, 3, 189, 1, 1, 1, 255, 1, 1, 1, 255, 3, 3, 3, 189, 255, 255, 255, 255, 3, 3, 3, 189, 1, 1, 1, 255, 1, 1, 1, 255, 3, 3, 3, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 189, 255, 255, 255, 255, 3, 3, 3, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 189, 255, 255, 255, 255, 3, 3, 3, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 189, 255, 255, 255, 255, 3, 3, 3, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 189, 255, 255, 255, 255, 3, 3, 3, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 189, 255, 255, 255, 255, 3, 3, 3, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 189, 255, 255, 255, 255, 3, 3, 3, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 189, 255, 255, 255, 255, 3, 3, 3, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 189, 255, 255, 255, 255, 3, 3, 3, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 189, 255, 255, 255, 255, 3, 3, 3, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 189, 255, 255, 255, 255, 3, 3, 3, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 189, 255, 255, 255, 255, 3, 3, 3, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 189, 1, 1, 1, 255, 1, 1, 1, 255, 3, 3, 3, 189, 255, 255, 255, 255, 3, 3, 3, 189, 1, 1, 1, 255, 1, 1, 1, 255, 3, 3, 3, 189, 3, 3, 3, 189, 241, 241, 241, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 233, 233, 233, 255, 3, 3, 3, 189, 6, 6, 6, 55, 3, 3, 3, 189, 237, 237, 237, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 233, 233, 233, 255, 3, 3, 3, 189, 6, 6, 6, 55, 0, 0, 0, 0, 6, 6, 6, 55, 3, 3, 3, 189, 233, 233, 233, 255, 255, 255, 255, 255, 233, 233, 233, 255, 3, 3, 3, 189, 6, 6, 6, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 55, 3, 3, 3, 189, 233, 233, 233, 255, 3, 3, 3, 189, 6, 6, 6, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 55, 3, 3, 3, 189, 6, 6, 6, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

		image.width = 9;
		image.height = 23;
		image.pixels = pixelsSizeNS;

		cursorSizeNS = glfwCreateCursor(&image, 4, 11);

		//Create size north-west south-east cursor.
		u8 pixelsSizeNWSE[17 * 17 * 4] = { 4, 4, 4, 135, 1, 1, 1, 243, 1, 1, 1, 243, 1, 1, 1, 243, 1, 1, 1, 243, 1, 1, 1, 243, 4, 4, 4, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 243, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 226, 226, 226, 255, 1, 1, 1, 244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 243, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 226, 226, 226, 255, 1, 1, 1, 244, 6, 6, 6, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 243, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 243, 255, 255, 255, 255, 221, 221, 221, 255, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 243, 218, 218, 218, 255, 1, 1, 1, 244, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 135, 1, 1, 1, 244, 6, 6, 6, 55, 0, 0, 0, 0, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 0, 0, 0, 0, 6, 6, 6, 55, 1, 1, 1, 244, 4, 4, 4, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 1, 1, 1, 244, 221, 221, 221, 255, 1, 1, 1, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 218, 218, 218, 255, 255, 255, 255, 255, 1, 1, 1, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 1, 1, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 55, 1, 1, 1, 244, 212, 212, 212, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 1, 1, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 244, 209, 209, 209, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 1, 1, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 135, 1, 1, 1, 243, 1, 1, 1, 243, 1, 1, 1, 243, 1, 1, 1, 243, 1, 1, 1, 243, 4, 4, 4, 135 };

		image.width = 17;
		image.height = 17;
		image.pixels = pixelsSizeNWSE;

		cursorSizeNWSE = glfwCreateCursor(&image, 8, 8);

		//Create size north-east south-west cursor.
		u8 pixelsSizeNESW[17 * 17 * 4] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 135, 1, 1, 1, 243, 1, 1, 1, 243, 1, 1, 1, 243, 1, 1, 1, 243, 1, 1, 1, 243, 4, 4, 4, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 244, 226, 226, 226, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 1, 1, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 55, 1, 1, 1, 244, 226, 226, 226, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 1, 1, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 1, 1, 1, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 221, 221, 221, 255, 255, 255, 255, 255, 1, 1, 1, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 1, 1, 1, 244, 218, 218, 218, 255, 1, 1, 1, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 0, 0, 0, 0, 6, 6, 6, 55, 1, 1, 1, 244, 4, 4, 4, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 135, 1, 1, 1, 244, 6, 6, 6, 55, 0, 0, 0, 0, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 243, 221, 221, 221, 255, 1, 1, 1, 244, 5, 5, 5, 75, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 243, 255, 255, 255, 255, 218, 218, 218, 255, 3, 3, 3, 158, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 243, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 3, 3, 3, 158, 5, 5, 5, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 243, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 212, 212, 212, 255, 1, 1, 1, 244, 6, 6, 6, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 243, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 209, 209, 209, 255, 1, 1, 1, 244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 135, 1, 1, 1, 243, 1, 1, 1, 243, 1, 1, 1, 243, 1, 1, 1, 243, 1, 1, 1, 243, 4, 4, 4, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

		image.width = 17;
		image.height = 17;
		image.pixels = pixelsSizeNESW;
		cursorSizeNESW = glfwCreateCursor(&image, 8, 8);

		//Create size all cursor.
		u8 pixelsSizeAll[25 * 25 * 4] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 230, 230, 230, 255, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 230, 230, 230, 255, 255, 255, 255, 255, 230, 230, 230, 255, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 230, 230, 230, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 230, 230, 230, 255, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 230, 230, 230, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 230, 230, 230, 255, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 7, 7, 7, 255, 7, 7, 7, 255, 0, 0, 0, 182, 255, 255, 255, 255, 0, 0, 0, 182, 7, 7, 7, 255, 7, 7, 7, 255, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 255, 255, 255, 255, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 255, 255, 255, 255, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 230, 230, 230, 255, 7, 7, 7, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 255, 255, 255, 255, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 255, 230, 230, 230, 255, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 230, 230, 230, 255, 255, 255, 255, 255, 7, 7, 7, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 255, 255, 255, 255, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 255, 255, 255, 255, 255, 230, 230, 230, 255, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 230, 230, 230, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 182, 255, 255, 255, 255, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 182, 255, 255, 255, 255, 255, 255, 255, 255, 230, 230, 230, 255, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 230, 230, 230, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 230, 230, 230, 255, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 230, 230, 230, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 182, 255, 255, 255, 255, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 182, 255, 255, 255, 255, 255, 255, 255, 255, 230, 230, 230, 255, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 230, 230, 230, 255, 255, 255, 255, 255, 7, 7, 7, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 255, 255, 255, 255, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 255, 255, 255, 255, 255, 230, 230, 230, 255, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 230, 230, 230, 255, 7, 7, 7, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 255, 255, 255, 255, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 255, 230, 230, 230, 255, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 255, 255, 255, 255, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 255, 255, 255, 255, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 7, 7, 7, 255, 7, 7, 7, 255, 0, 0, 0, 182, 255, 255, 255, 255, 0, 0, 0, 182, 7, 7, 7, 255, 7, 7, 7, 255, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 230, 230, 230, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 230, 230, 230, 255, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 230, 230, 230, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 230, 230, 230, 255, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 230, 230, 230, 255, 255, 255, 255, 255, 230, 230, 230, 255, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 230, 230, 230, 255, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 182, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

		image.width = 25;
		image.height = 25;
		image.pixels = pixelsSizeAll;

		cursorSizeAll = glfwCreateCursor(&image, 12, 12);
		
		//Create rotate top-left cursor.
		u8 pixelsRotateTopLeft[18 * 18 * 4] = {};

		image.width = 18;
		image.height = 18;
		image.pixels = pixelsRotateTopLeft;

		cursorRotateTopLeft = glfwCreateCursor(&image, 9, 9);

		//Create rotate top-right cursor.
		u8 pixelsRotateTopRight[18 * 18 * 4] = {};

		image.width = 18;
		image.height = 18;
		image.pixels = pixelsRotateTopRight;

		cursorRotateTopRight = glfwCreateCursor(&image, 8, 9);

		//Create rotate bottom-right cursor.
		u8 pixelsRotateBottomRight[18 * 18 * 4] = {};

		image.width = 18;
		image.height = 18;
		image.pixels = pixelsRotateBottomRight;

		cursorRotateBottomRight = glfwCreateCursor(&image, 8, 8);

		//Create rotate bottom-left cursor.
		u8 pixelsRotateBottomLeft[18 * 18 * 4] = {};

		image.width = 18;
		image.height = 18;
		image.pixels = pixelsRotateBottomLeft;

		cursorRotateBottomLeft = glfwCreateCursor(&image, 9, 8);

		//Create rotate top-middle cursor.
		u8 pixelsRotateTopMiddle[19 * 9 * 4] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 27, 0, 0, 0, 27, 0, 0, 0, 27, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 159, 0, 0, 0, 255, 20, 20, 20, 255, 56, 56, 56, 255, 20, 20, 20, 255, 0, 0, 0, 255, 0, 0, 0, 159, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 8, 8, 8, 251, 112, 112, 112, 255, 231, 231, 231, 255, 231, 231, 231, 255, 199, 199, 199, 255, 231, 231, 231, 255, 231, 231, 231, 255, 112, 112, 112, 255, 8, 8, 8, 251, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 163, 44, 44, 44, 255, 211, 211, 211, 255, 167, 167, 167, 255, 36, 36, 36, 255, 0, 0, 0, 203, 0, 0, 0, 167, 0, 0, 0, 203, 36, 36, 36, 255, 167, 167, 167, 255, 211, 211, 211, 255, 44, 44, 44, 255, 0, 0, 0, 163, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 7, 7, 7, 255, 227, 227, 227, 255, 104, 104, 104, 255, 0, 0, 0, 195, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 195, 104, 104, 104, 255, 227, 227, 227, 255, 7, 7, 7, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 15, 15, 15, 255, 0, 0, 0, 155, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 155, 15, 15, 15, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 251, 251, 251, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 251, 251, 251, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255 };

		image.width = 19;
		image.height = 9;
		image.pixels = pixelsRotateTopMiddle;

		cursorRotateTopMiddle = glfwCreateCursor(&image, 9, 6);

		//Create rotate right-middle cursor.
		u8 pixelsRotateRightMiddle[9 * 19 * 4] = { 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 7, 7, 7, 255, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 251, 251, 251, 255, 15, 15, 15, 255, 227, 227, 227, 255, 44, 44, 44, 255, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 155, 104, 104, 104, 255, 211, 211, 211, 255, 8, 8, 8, 251, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 195, 167, 167, 167, 255, 112, 112, 112, 255, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 36, 36, 36, 255, 231, 231, 231, 255, 0, 0, 0, 255, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 203, 231, 231, 231, 255, 20, 20, 20, 255, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167, 199, 199, 199, 255, 56, 56, 56, 255, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 203, 231, 231, 231, 255, 20, 20, 20, 255, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 36, 36, 36, 255, 231, 231, 231, 255, 0, 0, 0, 255, 0, 0, 0, 5, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 195, 167, 167, 167, 255, 112, 112, 112, 255, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 155, 104, 104, 104, 255, 211, 211, 211, 255, 8, 8, 8, 251, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 251, 251, 251, 255, 15, 15, 15, 255, 227, 227, 227, 255, 44, 44, 44, 255, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 7, 7, 7, 255, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0 };

		image.width = 9;
		image.height = 19;
		image.pixels = pixelsRotateRightMiddle;

		cursorRotateRightMiddle = glfwCreateCursor(&image, 2, 9);

		//Create rotate bottom-middle cursor.
		u8 pixelsRotateBottomMiddle[19 * 9 * 4] = {};

		image.width = 19;
		image.height = 9;
		image.pixels = pixelsRotateBottomMiddle;

		cursorRotateBottomMiddle = glfwCreateCursor(&image, 9, 2);

		//Create rotate left-middle cursor.
		u8 pixelsRotateLeftMiddle[9 * 19 * 4] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 7, 7, 7, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 44, 44, 44, 255, 227, 227, 227, 255, 15, 15, 15, 255, 251, 251, 251, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 36, 8, 8, 8, 251, 211, 211, 211, 255, 104, 104, 104, 255, 0, 0, 0, 155, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 159, 112, 112, 112, 255, 167, 167, 167, 255, 0, 0, 0, 195, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 5, 0, 0, 0, 255, 231, 231, 231, 255, 36, 36, 36, 255, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 20, 20, 20, 255, 231, 231, 231, 255, 0, 0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 56, 56, 56, 255, 199, 199, 199, 255, 0, 0, 0, 167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 20, 20, 20, 255, 231, 231, 231, 255, 0, 0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 255, 231, 231, 231, 255, 36, 36, 36, 255, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 112, 112, 112, 255, 167, 167, 167, 255, 0, 0, 0, 195, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 36, 8, 8, 8, 251, 211, 211, 211, 255, 104, 104, 104, 255, 0, 0, 0, 155, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 44, 44, 44, 255, 227, 227, 227, 255, 15, 15, 15, 255, 251, 251, 251, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 7, 7, 7, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255 };

		image.width = 9;
		image.height = 19;
		image.pixels = pixelsRotateLeftMiddle;

		cursorRotateLeftMiddle = glfwCreateCursor(&image, 6, 9);

		//For getting the cursor pixel data.
		/*Texture* tex = new Texture(this);
		tex->load("C:/Users/Fabian/Dropbox/Media/Zixel/icon32_v2.png");
		u8* data = tex->getData();

		std::string dataStr = "{ ";
		s32 totalSize = tex->getWidth() * tex->getHeight() * 4;
		for (s32 i = 0; i < totalSize; ++i) {
			dataStr += std::to_string(data[i]);
			if (i != totalSize - 1) dataStr += ", ";
			else dataStr += " };";
		}

		ZIXEL_TRACE(dataStr);*/

		//Initialized.
		initialized = true;

		ZIXEL_INFO("Initialized renderer.");

		return true;
	}

	f64 Renderer::getCurrentTime() {
		return glfwGetTime() * 1000.0;
	}

	void Renderer::getWindowSize(s32& width, s32& height) {

		width = windowWidth;
		height = windowHeight;

	}

	void Renderer::onWindowResize(s32 _width, s32 _height) {

		if (initialized) {

			windowWidth = _width;
			windowHeight = _height;

			if (targetSurface == nullptr) {
				glViewport(0, 0, _width, _height);
			}

		}

	}

	void Renderer::getMousePos(s32& x, s32& y) {

		f64 xPos, yPos;
		glfwGetCursorPos(window, &xPos, &yPos);

		x = (s32)xPos;
		y = (s32)yPos;

	}

	void Renderer::showMouseCursor() {
		glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_NORMAL);
	}
	
	void Renderer::hideMouseCursor() {
		glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_HIDDEN);
	}

	void Renderer::setMouseCursor(u8 _cursor) {

		if (_cursor == CURSOR_IBEAM) glfwSetCursor(window, cursorIBeam);
		else if (_cursor == CURSOR_CROSSHAIR) glfwSetCursor(window, cursorCrosshair);
		else if (_cursor == CURSOR_HAND) glfwSetCursor(window, cursorHand);
		else if (_cursor == CURSOR_INVALID) glfwSetCursor(window, cursorInvalid);
		else if (_cursor == CURSOR_SIZE_WE) glfwSetCursor(window, cursorSizeWE);
		else if (_cursor == CURSOR_SIZE_NS) glfwSetCursor(window, cursorSizeNS);
		else if (_cursor == CURSOR_SIZE_NWSE) glfwSetCursor(window, cursorSizeNWSE);
		else if (_cursor == CURSOR_SIZE_NESW) glfwSetCursor(window, cursorSizeNESW);
		else if (_cursor == CURSOR_SIZE_ALL) glfwSetCursor(window, cursorSizeAll);
		else if (_cursor == CURSOR_ROTATE_TOP_LEFT) glfwSetCursor(window, cursorRotateTopLeft);
		else if (_cursor == CURSOR_ROTATE_TOP_RIGHT) glfwSetCursor(window, cursorRotateTopRight);
		else if (_cursor == CURSOR_ROTATE_BOTTOM_RIGHT) glfwSetCursor(window, cursorRotateBottomRight);
		else if (_cursor == CURSOR_ROTATE_BOTTOM_LEFT) glfwSetCursor(window, cursorRotateBottomLeft);
		else if (_cursor == CURSOR_ROTATE_TOP_MIDDLE) glfwSetCursor(window, cursorRotateTopMiddle);
		else if (_cursor == CURSOR_ROTATE_RIGHT_MIDDLE) glfwSetCursor(window, cursorRotateRightMiddle);
		else if (_cursor == CURSOR_ROTATE_BOTTOM_MIDDLE) glfwSetCursor(window, cursorRotateBottomMiddle);
		else if (_cursor == CURSOR_ROTATE_LEFT_MIDDLE) glfwSetCursor(window, cursorRotateLeftMiddle);
		else glfwSetCursor(window, nullptr);

	}

	void Renderer::setBlendMode(Blend _sourceFactor, Blend _destFactor) {

		blendSourceColor = _sourceFactor;
		blendSourceAlpha = _sourceFactor;
		blendDestColor = _destFactor;
		blendDestAlpha = _destFactor;

		glBlendFunc((GLuint)_sourceFactor, (GLuint)_destFactor);

	}

	void Renderer::setBlendMode(Blend _sourceColorFactor, Blend _destColorFactor, Blend _sourceAlphaFactor, Blend _destAlphaFactor) {

		blendSourceColor = _sourceColorFactor;
		blendSourceAlpha = _sourceAlphaFactor;
		blendDestColor = _destColorFactor;
		blendDestAlpha = _destAlphaFactor;

		glBlendFuncSeparate((GLuint)_sourceColorFactor, (GLuint)_destColorFactor, (GLuint)_sourceAlphaFactor, (GLuint)_destAlphaFactor);

	}

	void Renderer::defaultBlendMode() {

		blendSourceColor = Blend::SrcAlpha;
		blendSourceAlpha = Blend::SrcAlpha;
		blendDestColor = Blend::InvSrcAlpha;
		blendDestAlpha = Blend::InvSrcAlpha;

		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	}

	void Renderer::saveBlendModeState() {

		blendSourceColorSaved = blendSourceColor;
		blendSourceAlphaSaved = blendSourceAlpha;
		blendDestColorSaved = blendDestColor;
		blendDestAlphaSaved = blendDestAlpha;

	}

	void Renderer::restoreBlendModeState() {

		setBlendMode(blendSourceColorSaved, blendDestColorSaved, blendSourceAlphaSaved, blendDestAlphaSaved);

	}

	void Renderer::cutStart(s32 x, s32 y, s32 width, s32 height) {

		if (width < 0) width = 0;
		if (height < 0) height = 0;

		if (cutStack.size() > 0) {

			Cut& parent = cutStack[cutStack.size() - 1];

			x = Math::clampInt(x, parent.x, parent.x + parent.width - 1);
			y = Math::clampInt(y, parent.y, parent.y + parent.height - 1);

			if (parent.width <= 0) width = 0;
			else width = Math::minInt(width, (parent.x + parent.width - 1) - x + 1);

			if (parent.height <= 0) height = 0;
			else height = Math::minInt(height, (parent.y + parent.height - 1) - y + 1);

		}
		else {
			glEnable(GL_SCISSOR_TEST);
		}
		
		cutStack.push_back({ x, y, width, height });

		s32 w, h = 0;
		getWindowSize(w, h);
		glScissor(x, h - y - height, width, height);

	}

	void Renderer::cutEnd() {

		if (cutStack.size() <= 0) {

			ZIXEL_WARN("Trying to call Renderer::cutEnd on empty stack.");
			return;

		}

		cutStack.pop_back();

		if (cutStack.size() <= 0) {
			glDisable(GL_SCISSOR_TEST);
		}
		else {

			Cut& cut = cutStack[cutStack.size() - 1];

			s32 w, h = 0;
			getWindowSize(w, h);
			glScissor(cut.x, h - cut.y - cut.height, cut.width, cut.height);

		}

	}

	void Renderer::cutPause() {

		/*if (cutStack.size() <= 0) {

			ZIXEL_WARN("Trying to call Renderer::cutPause on empty stack.");
			return;

		}*/

		if (cutPausedCounter == 0) {
			glDisable(GL_SCISSOR_TEST);
		}

		++cutPausedCounter;
		
	}

	void Renderer::cutResume() {

		/*if (cutStack.size() <= 0) {

			ZIXEL_WARN("Trying to call Renderer::cutResume on empty stack.");
			return;

		}*/

		if (cutPausedCounter == 0) {

			ZIXEL_WARN("Trying to call Renderer::cutResume on non-paused stack.");
			return;

		}

		--cutPausedCounter;

		if (cutPausedCounter == 0) {
			glEnable(GL_SCISSOR_TEST);
		}

	}

	TextureAtlas* Renderer::getTextureAtlas() {
		return ResourceManager::getTextureAtlas();
	}

	Sprite* Renderer::getTextureAtlasSprite(std::string spriteName) {
		if (ResourceManager::getTextureAtlas() == nullptr) {
			return nullptr;
		}

		return ResourceManager::getTextureAtlas()->getTextureAtlasSprite(spriteName);

	}

	Font* Renderer::getTextureAtlasFont(std::string fontName) {
		if (ResourceManager::getTextureAtlas() == nullptr) {
			return nullptr;
		}

		return ResourceManager::getTextureAtlas()->getTextureAtlasFont(fontName);

	}

	Shader* Renderer::getShader(std::string _shaderName) {
		return ResourceManager::getShader(_shaderName);
	}

	s32 Renderer::getStringWidth(Font* font, std::string& text) {

		s32 textWidth = 0;
		s32 lineWidth = 0;

		for (size_t i = 0; i < text.length(); ++i) {

			char& c = text[i];

			if (c == '\n') {

				if (lineWidth > textWidth) {
					textWidth = lineWidth;
				}

				lineWidth = 0;

				continue;

			}
			
			if (c == '\t') {

				size_t ind = (size_t)' ';
				if (ind >= font->glyphs.size()) continue;

				FontGlyph* glyph = font->glyphs[ind];

				lineWidth += (glyph->advanceX * 4);

				continue;

			}
			
			if (c == ' ') {

				size_t ind = (size_t)' ';
				if (ind >= font->glyphs.size()) continue;

				FontGlyph* glyph = font->glyphs[ind];

				lineWidth += glyph->advanceX;

				continue;

			}

			size_t ind = (size_t)c;
			if (ind >= font->glyphs.size()) {

				ind = (size_t)'?';
				if (ind >= font->glyphs.size()) continue;

			}

			FontGlyph* glyph = font->glyphs[ind];

			//if (i == text.size() - 1 || text[i + 1] == '\n') {
			//	lineWidth += glyph->sizeX;
			//}
			//else {
				lineWidth += glyph->advanceX;
			//}

		}

		if (lineWidth > textWidth) {
			textWidth = lineWidth;
		}

		return textWidth;

	}

	s32 Renderer::getStringWidth(Font* font, UTF8String& text) {

		s32 textWidth = 0;
		s32 lineWidth = 0;

		u32 c;
		for (size_t i = 0; i < text.length(); ++i) {

			c = text[i];

			if (c == '\n') {

				if (lineWidth > textWidth) {
					textWidth = lineWidth;
				}

				lineWidth = 0;

				continue;

			}

			if (c == '\t') {

				size_t ind = (size_t)' ';
				if (ind >= font->glyphs.size()) continue;

				FontGlyph* glyph = font->glyphs[ind];

				lineWidth += (glyph->advanceX * 4);

				continue;

			}

			if (c == ' ') {

				size_t ind = (size_t)' ';
				if (ind >= font->glyphs.size()) continue;

				FontGlyph* glyph = font->glyphs[ind];

				lineWidth += glyph->advanceX;

				continue;

			}

			size_t ind = (size_t)c;
			if (ind >= font->glyphs.size()) {

				ind = (size_t)'?';
				if (ind >= font->glyphs.size()) continue;

			}

			FontGlyph* glyph = font->glyphs[ind];

			lineWidth += glyph->advanceX;

		}

		if (lineWidth > textWidth) {
			textWidth = lineWidth;
		}

		return textWidth;

	}

	s32 Renderer::getStringWidth(Font* font, char text) {

		if (text == '\t') {

			size_t ind = (size_t)' ';
			if (ind >= font->glyphs.size()) return 0;

			FontGlyph* glyph = font->glyphs[ind];
			return (glyph->advanceX * 4);

		}
		
		if (text == ' ') {

			size_t ind = (size_t)' ';
			if (ind >= font->glyphs.size()) return 0;

			FontGlyph* glyph = font->glyphs[ind];
			return glyph->advanceX;

		}

		size_t ind = (size_t)text;
		if (ind >= font->glyphs.size()) {

			ind = (size_t)'?';
			if (ind >= font->glyphs.size()) return 0;

		}

		FontGlyph* glyph = font->glyphs[ind];
		return glyph->advanceX;

		return 0;

	}

	s32 Renderer::getStringHeight(Font* font, std::string& text) {

		if (text == "") return 0;

		s32 textHeight = font->advanceY;

		for (auto& c : text) {

			if (c == '\n') {
				textHeight += font->advanceY;
			}

		}

		return textHeight;

	}

	s32 Renderer::getStringHeight(Font* font, UTF8String& text) {

		if (text == "") return 0;

		s32 textHeight = font->advanceY;

		for (auto& c : text) {

			if (c == '\n') {
				textHeight += font->advanceY;
			}

		}

		return textHeight;

	}

	s32 Renderer::getStringHeight(Font* font, char text) {

		if (text == 0) return 0;

		return font->advanceY;

	}

	void Renderer::setShader(Shader* _shader) {

		if (!_shader->compiled) {

			ZIXEL_WARN("Error in Renderer::setShader. Shader has not been compiled properly.");
			return;

		}

		currentShader = _shader;
		shaderSamplerIndex = 0;
		shaderSamplers.clear();

		glUseProgram(_shader->shaderProgram);
		
		glm::mat4 matProj;
		if (targetSurface != nullptr) {
			//For some reason when rendering to a surface we need to flip top and bottom?
			matProj = glm::ortho(0.0f, (f32)targetSurface->width, 0.0f, (f32)targetSurface->height, -1.0f, 1.0f);
		}
		else {
			matProj = glm::ortho(0.0f, (f32)windowWidth, (f32)windowHeight, 0.0f, -1.0f, 1.0f);
		}

		currentShader->setUniformMatrix4fv(currentShader->uniformMatProj, matProj);
		currentShader->setUniformMatrix4fv(currentShader->uniformMatModel, quadMat);

	}

	void Renderer::resetShader() {

		if (currentShader == quadShader) {

			ZIXEL_WARN("Error in Renderer::resetShader. No shader has been set.");
			return;

		}

		setShader(quadShader);

	}

	void Renderer::setDefaultShader() {

		glBindVertexArray(quadVAO);
		glEnableVertexAttribArray(0);
		glActiveTexture(GL_TEXTURE0);

		if (ResourceManager::getTextureAtlas() != nullptr) glBindTexture(GL_TEXTURE_2D, ResourceManager::getTextureAtlas()->getTexture()->getId());

		setShader(quadShader);

	}

	void Renderer::bindTexture(GLint _uniform, GLuint _textureHandle) {

		u8 samplerIndex;

		if (shaderSamplers.find(_uniform) == shaderSamplers.end()) {

			samplerIndex = shaderSamplerIndex + 1;
			shaderSamplers[_uniform] = samplerIndex;

			++shaderSamplerIndex;

		}
		else {
			samplerIndex = shaderSamplers[_uniform];
		}

		currentShader->setUniform1i(_uniform, samplerIndex);

		glActiveTexture(GL_TEXTURE0 + samplerIndex);
		glBindTexture(GL_TEXTURE_2D, _textureHandle);
		glActiveTexture(GL_TEXTURE0);

	}

	void Renderer::bindTexture(GLint _uniform, Texture* _texture) {
		bindTexture(_uniform, _texture->getId());
	}
	
	void Renderer::bindTexture(GLint _uniform, Surface* _surface) {
		bindTexture(_uniform, _surface->tex);
	}

	void Renderer::renderBegin(Color3f& clearColor) {

		atRenderStage = true;

		glClearColor(clearColor.r, clearColor.g, clearColor.b, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		glm::mat4 matProj = glm::ortho(0.0f, (f32)windowWidth, (f32)windowHeight, 0.0f, -1.0f, 1.0f);

		setDefaultShader();
		currentShader->setUniformMatrix4fv(currentShader->uniformMatProj, matProj);

	}

	void Renderer::renderEnd() {

		glBindVertexArray(0);
		glDisableVertexAttribArray(0);

		if (cutStack.size() > 0) {

			ZIXEL_WARN("Error in Renderer::renderEnd. Cut stack size is greater than zero. Remember to call Renderer::cutEnd.");
			cutStack.clear();

			if (cutPausedCounter == 0) { //Scissor test already disabled if the cut is paused.
				glDisable(GL_SCISSOR_TEST);
			}

		}

		if (cutPausedCounter > 0) {

			ZIXEL_WARN("Error in Renderer::renderEnd. Cut stack is paused. Remember to call Renderer::cutResume.");
			cutPausedCounter = 0;

		}

		if (targetSurface != nullptr) {

			ZIXEL_WARN("Error in Renderer::renderEnd. Remember to unbind any bound surfaces before end of frame.");
			unbindSurface();

		}

		if (currentShader != quadShader) {

			ZIXEL_WARN("Error in Renderer::renderEnd. Remember to reset shaders after use.");
			resetShader();

		}

		glfwSwapBuffers(window);

		atRenderStage = false;

	}

	void Renderer::bindSurface(Surface* _surface) {

		if (!_surface->created) {

			ZIXEL_WARN("Error in Renderer::bindSurface. The target surface might not be initialzied correctly.");
			return;

		}

		targetSurface = _surface;

		glBindFramebuffer(GL_FRAMEBUFFER, targetSurface->fbo);
		glViewport(0, 0, _surface->width, _surface->height);

		if (currentShader != nullptr) {
			
			//For some reason when rendering to a surface we need to flip top and bottom?
			glm::mat4 matProj = glm::ortho(0.0f, (f32)_surface->width, 0.0f, (f32)_surface->height, -1.0f, 1.0f);
			currentShader->setUniformMatrix4fv(currentShader->uniformMatProj, matProj);

		}

	}

	void Renderer::unbindSurface() {

		if (targetSurface != nullptr) {

			targetSurface = nullptr;

			glBindFramebuffer(GL_FRAMEBUFFER, 0);
			glViewport(0, 0, windowWidth, windowHeight);

			if (currentShader != nullptr) {

				glm::mat4 matProj = glm::ortho(0.0f, (f32)windowWidth, (f32)windowHeight, 0.0f, -1.0f, 1.0f);
				currentShader->setUniformMatrix4fv(currentShader->uniformMatProj, matProj);

			}

		}
		else {
			ZIXEL_WARN("Error in Renderer::unbindSurface. No surface is bound.");
		}

	}

	void Renderer::renderTexture(Texture* texture, s32 x, s32 y, s32 width, s32 height, f32 alpha) {

		if (texture == nullptr) {

			ZIXEL_WARN("Error in Renderer::renderTexture. '_texture' is null.");
			return;

		}

		if (width <= 0 || height <= 0) return;

		glBindTexture(GL_TEXTURE_2D, texture->getId());

		currentShader->setUniformBool(currentShader->uniformHasTexture, true);
		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)x, (f32)y, (f32)width, (f32)height);
		currentShader->setUniform4f(currentShader->uniformAtlasUV, 0.0f, 0.0f, 1.0f, 1.0f);
		currentShader->setUniform4f(currentShader->uniformBlend, 1.0f, 1.0f, 1.0f, alpha);

		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		glBindTexture(GL_TEXTURE_2D, (ResourceManager::getTextureAtlas() != nullptr) ? ResourceManager::getTextureAtlas()->getTexture()->getId() : 0);

	}

	void Renderer::renderSprite(const char* spriteName, s32 index, s32 x, s32 y, f32 alpha, Color4f blend) {
		if (ResourceManager::getTextureAtlas() == nullptr) return;
		renderSprite(ResourceManager::getTextureAtlas()->getTextureAtlasSprite(spriteName), index, x, y, alpha, blend);
	}

	void Renderer::renderSprite(Sprite* sprite, s32 index, s32 x, s32 y, f32 alpha, Color4f blend) {

		if (sprite == nullptr) {

			ZIXEL_WARN("Error in Renderer::renderSprite. '_sprite' is null.");
			return;

		}

		if (index < 0 || index >= sprite->subSpriteList.size()) {

			ZIXEL_WARN("Error in Renderer::renderSprite. Sub-sprite index ({}) out of range. Valid range: 0 - {}.", index, sprite->subSpriteList.size() - 1);
			index = 0;

		}

		SubSprite* sub = sprite->subSpriteList[index];

		currentShader->setUniformBool(currentShader->uniformHasTexture, true);
		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)x, (f32)y, (f32)sprite->sizeX, (f32)sprite->sizeY);
		currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY, sprite->uvSizeX, sprite->uvSizeY);
		currentShader->setUniform4f(currentShader->uniformBlend, blend.r, blend.g, blend.b, blend.a * alpha);

		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

	}

	void Renderer::renderSpriteStretched(const char* _spriteName, s32 _index, s32 _x, s32 _y, s32 _width, s32 _height, f32 _alpha) {
		if (ResourceManager::getTextureAtlas() == nullptr) return;
		renderSpriteStretched(ResourceManager::getTextureAtlas()->getTextureAtlasSprite(_spriteName), _index, _x, _y, _width, _height, _alpha);
	}

	void Renderer::renderSpriteStretched(Sprite* _sprite, s32 _index, s32 _x, s32 _y, s32 _width, s32 _height, f32 _alpha) {

		if (_sprite == nullptr) {

			ZIXEL_WARN("Error in Renderer::renderSpriteStretched. '_sprite' is null.");
			return;

		}

		if (_index < 0 || _index >= _sprite->subSpriteList.size()) {

			ZIXEL_WARN("Error in Renderer::renderSpriteStretched. Sub-sprite index ({}) out of range. Valid range: 0 - {}.", _index, _sprite->subSpriteList.size() - 1);
			_index = 0;

		}

		if (_width == 0 || _height == 0) return;

		SubSprite* sub = _sprite->subSpriteList[_index];

		currentShader->setUniformBool(currentShader->uniformHasTexture, true);
		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x, (f32)_y, (f32)_width, (f32)_height);
		currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY, _sprite->uvSizeX, _sprite->uvSizeY);
		currentShader->setUniform4f(currentShader->uniformBlend, 1.0f, 1.0f, 1.0f, _alpha);

		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

	}

	void Renderer::renderSpritePart(const char* spriteName, s32 index, s32 left, s32 top, s32 width, s32 height, s32 x, s32 y, f32 alpha) {
		if (ResourceManager::getTextureAtlas() == nullptr) return;
		renderSpritePart(ResourceManager::getTextureAtlas()->getTextureAtlasSprite(spriteName), index, left, top, width, height, x, y, alpha);
	}

	void Renderer::renderSpritePart(Sprite* sprite, s32 index, s32 left, s32 top, s32 width, s32 height, s32 x, s32 y, f32 alpha) {

		if (sprite == nullptr) {

			ZIXEL_WARN("Error in Renderer::renderSpritePart. '_sprite' is null.");
			return;

		}

		if (index < 0 || index >= sprite->subSpriteList.size()) {

			ZIXEL_WARN("Error in Renderer::renderSpritePart. Sub-sprite index ({}) out of range. Valid range: 0 - {}.", index, sprite->subSpriteList.size() - 1);
			index = 0;

		}
		
		left = Math::clampInt(left, 0, sprite->sizeX - 1);
		top = Math::clampInt(top, 0, sprite->sizeY - 1);
		width = Math::minInt(width, sprite->sizeX - left);
		height = Math::minInt(height, sprite->sizeY - top);
		
		if (width <= 0 || height <= 0) return;

		SubSprite* sub = sprite->subSpriteList[index];

		f32 uvX = sub->textureAtlasUVX + (((f32)left / (f32)sprite->sizeX) * sprite->uvSizeX);
		f32 uvY = sub->textureAtlasUVY + (((f32)top / (f32)sprite->sizeY) * sprite->uvSizeY);
		f32 uvWidth = ((f32)width / (f32)sprite->sizeX) * sprite->uvSizeX;
		f32 uvHeight = ((f32)height / (f32)sprite->sizeY) * sprite->uvSizeY;

		currentShader->setUniformBool(currentShader->uniformHasTexture, true);
		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)x, (f32)y, (f32)width, (f32)height);
		currentShader->setUniform4f(currentShader->uniformAtlasUV, uvX, uvY, uvWidth, uvHeight);
		currentShader->setUniform4f(currentShader->uniformBlend, 1.0f, 1.0f, 1.0f, alpha);

		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

	}

	void Renderer::renderSpritePartStretched(const char* spriteName, s32 index, s32 left, s32 top, s32 partWidth, s32 partHeight, s32 x, s32 y, s32 width, s32 height, f32 alpha) {
		if (ResourceManager::getTextureAtlas() == nullptr) return;
		renderSpritePartStretched(ResourceManager::getTextureAtlas()->getTextureAtlasSprite(spriteName), index, left, top, partWidth, partHeight, x, y, width, height, alpha);
	}

	void Renderer::renderSpritePartStretched(Sprite* sprite, s32 index, s32 left, s32 top, s32 partWidth, s32 partHeight, s32 x, s32 y, s32 width, s32 height, f32 alpha) {

		if (sprite == nullptr) {

			ZIXEL_WARN("Error in Renderer::renderSpritePartStretched. '_sprite' is null.");
			return;

		}

		if (index < 0 || index >= sprite->subSpriteList.size()) {

			ZIXEL_WARN("Error in Renderer::renderSpritePartStretched. Sub-sprite index ({}) out of range. Valid range: 0 - {}.", index, sprite->subSpriteList.size() - 1);
			index = 0;

		}

		if (width <= 0 || height <= 0) return;

		left = Math::clampInt(left, 0, sprite->sizeX - 1);
		top = Math::clampInt(top, 0, sprite->sizeY - 1);
		partWidth = Math::minInt(partWidth, sprite->sizeX - left);
		partHeight = Math::minInt(partHeight, sprite->sizeY - top);

		if (partWidth <= 0 || partHeight <= 0) return;

		SubSprite* sub = sprite->subSpriteList[index];

		f32 uvX = sub->textureAtlasUVX + (((f32)left / (f32)sprite->sizeX) * sprite->uvSizeX);
		f32 uvY = sub->textureAtlasUVY + (((f32)top / (f32)sprite->sizeY) * sprite->uvSizeY);
		f32 uvWidth = ((f32)partWidth / (f32)sprite->sizeX) * sprite->uvSizeX;
		f32 uvHeight = ((f32)partHeight / (f32)sprite->sizeY) * sprite->uvSizeY;

		currentShader->setUniformBool(currentShader->uniformHasTexture, true);
		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)x, (f32)y, (f32)width, (f32)height);
		currentShader->setUniform4f(currentShader->uniformAtlasUV, uvX, uvY, uvWidth, uvHeight);
		currentShader->setUniform4f(currentShader->uniformBlend, 1.0f, 1.0f, 1.0f, alpha);

		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

	}
	
	void Renderer::render9P(const char* spriteName, s32 index, s32 x, s32 y, s32 width, s32 height, f32 alpha) {
		if (ResourceManager::getTextureAtlas() == nullptr) return;
		render9P(ResourceManager::getTextureAtlas()->getTextureAtlasSprite(spriteName), index, x, y, width, height, alpha);
	}

	void Renderer::render9P(Sprite* sprite, s32 index, s32 x, s32 y, s32 width, s32 height, f32 alpha) {

		if (sprite == nullptr) {

			ZIXEL_WARN("Error in Renderer::render9P. '_sprite' is null.");
			return;

		}

		if (index < 0 || index >= sprite->subSpriteList.size()) {

			ZIXEL_WARN("Error in Renderer::render9P. Sub-sprite index ({}) out of range. Valid range: 0 - {}.", index, sprite->subSpriteList.size() - 1);
			index = 0;

		}

		if (width <= 0 || height <= 0) return;

		SubSprite* sub = sprite->subSpriteList[index];

		s32 partW = sprite->sizeX / 3;
		s32 partH = sprite->sizeY / 3;
		f32 partUVW = sprite->uvSizeX / 3.0f;
		f32 partUVH = sprite->uvSizeY / 3.0f;

		currentShader->setUniformBool(currentShader->uniformHasTexture, true);
		currentShader->setUniform4f(currentShader->uniformBlend, 1.0f, 1.0f, 1.0f, alpha);

		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)x, (f32)y, (f32)partW, (f32)partH);
		currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY, partUVW, partUVH);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)(x + width - partW), (f32)y, (f32)partW, (f32)partH);
		currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + sprite->uvSizeX - partUVW, sub->textureAtlasUVY, partUVW, partUVH);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)x, (f32)(y + height - partH), (f32)partW, (f32)partH);
		currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY + sprite->uvSizeY - partUVH, partUVW, partUVH);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)(x + width - partW), (f32)(y + height - partH), (f32)partW, (f32)partH);
		currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + sprite->uvSizeX - partUVW, sub->textureAtlasUVY + sprite->uvSizeY - partUVH, partUVW, partUVH);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)(x + partW), (f32)y, (f32)(width - (partW * 2)), (f32)partH);
		currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + partUVW, sub->textureAtlasUVY, partUVW, partUVH);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)(x + partW), (f32)(y + height - partH), (f32)(width - (partW * 2)), (f32)partH);
		currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + partUVW, sub->textureAtlasUVY + sprite->uvSizeY - partUVH, partUVW, partUVH);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)x, (f32)(y + partH), (f32)partW, (f32)(height - (partH * 2)));
		currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY + partUVH, partUVW, partUVH);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)(x + width - partW), (f32)(y + partH), (f32)partW, (f32)(height - (partH * 2)));
		currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + sprite->uvSizeX - partUVW, sub->textureAtlasUVY + partUVH, partUVW, partUVH);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)(x + partW), (f32)(y + partH), (f32)(width - (partW * 2)), (f32)(height - (partH * 2)));
		currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + partUVW, sub->textureAtlasUVY + partUVH, partUVW, partUVH);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

	}

	void Renderer::render3PHor(const char* spriteName, s32 index, s32 x, s32 y, s32 width, f32 alpha) {
		if (ResourceManager::getTextureAtlas() == nullptr) return;
		render3PHor(ResourceManager::getTextureAtlas()->getTextureAtlasSprite(spriteName), index, x, y, width, alpha);
	}

	void Renderer::render3PHor(Sprite* sprite, s32 index, s32 x, s32 y, s32 width, f32 alpha) {

		if (sprite == nullptr) {

			ZIXEL_WARN("Error in Renderer::render3PHor. '_sprite' is null.");
			return;

		}

		if (width <= 0) return;

		if (index < 0 || index >= sprite->subSpriteList.size()) {

			ZIXEL_WARN("Error in Renderer::render3PHor. Sub-sprite index ({}) out of range. Valid range: 0 - {}.", index, sprite->subSpriteList.size() - 1);
			index = 0;

		}

		SubSprite* sub = sprite->subSpriteList[index];

		s32 partW = (sprite->sizeX / 3);
		f32 partUVW = sprite->uvSizeX / 3.0f;

		currentShader->setUniformBool(currentShader->uniformHasTexture, true);
		currentShader->setUniform4f(currentShader->uniformBlend, 1.0f, 1.0f, 1.0f, alpha);

		if (width == sprite->sizeX) {

			currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)x, (f32)y, (f32)sprite->sizeX, (f32)sprite->sizeY);
			currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY, sprite->uvSizeX, sprite->uvSizeY);
			glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		}
		else if (width > partW * 2) {

			currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)x, (f32)y, (f32)partW, (f32)sprite->sizeY);
			currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY, partUVW, sprite->uvSizeY);
			glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

			currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)(x + width - partW), (f32)y, (f32)partW, (f32)sprite->sizeY);
			currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + sprite->uvSizeX - partUVW, sub->textureAtlasUVY, partUVW, sprite->uvSizeY);
			glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

			currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)(x + partW), (f32)y, (f32)(width - (partW * 2)), (f32)sprite->sizeY);
			currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + partUVW, sub->textureAtlasUVY, partUVW, sprite->uvSizeY);
			glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		}
		else {

			s32 halfWLeft = (width / 2);
			s32 halfWRight = (width - halfWLeft);

			f32 halfUVWLeft = ((f32)halfWLeft / (f32)sprite->sizeX) * sprite->uvSizeX;
			f32 halfUVWRight = ((f32)halfWRight / (f32)sprite->sizeX) * sprite->uvSizeX;

			currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)x, (f32)y, (f32)halfWLeft, (f32)sprite->sizeY);
			currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY, halfUVWLeft, sprite->uvSizeY);
			glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

			currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)(x + halfWLeft), (f32)y, (f32)halfWRight, (f32)sprite->sizeY);
			currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + sprite->uvSizeX - halfUVWRight, sub->textureAtlasUVY, halfUVWRight, sprite->uvSizeY);
			glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		}
		
	}

	void Renderer::render3PVer(const char* spriteName, s32 index, s32 x, s32 y, s32 height, f32 alpha) {
		if (ResourceManager::getTextureAtlas() == nullptr) return;
		render3PVer(ResourceManager::getTextureAtlas()->getTextureAtlasSprite(spriteName), index, x, y, height, alpha);
	}

	void Renderer::render3PVer(Sprite* sprite, s32 index, s32 x, s32 y, s32 height, f32 alpha) {

		if (sprite == nullptr) {

			ZIXEL_WARN("Error in Renderer::render3PVer. '_sprite' is null.");
			return;

		}

		if (height <= 0) return;

		if (index < 0 || index >= sprite->subSpriteList.size()) {

			ZIXEL_WARN("Error in Renderer::render3PVer. Sub-sprite index ({}) out of range. Valid range: 0 - {}.", index, sprite->subSpriteList.size() - 1);
			index = 0;

		}

		SubSprite* sub = sprite->subSpriteList[index];

		s32 partH = (sprite->sizeY / 3);
		f32 partUVH = sprite->uvSizeY / 3.0f;

		currentShader->setUniformBool(currentShader->uniformHasTexture, true);
		currentShader->setUniform4f(currentShader->uniformBlend, 1.0f, 1.0f, 1.0f, alpha);

		if (height == sprite->sizeY) {

			currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)x, (f32)y, (f32)sprite->sizeX, (f32)sprite->sizeY);
			currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY, sprite->uvSizeX, sprite->uvSizeY);
			glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		}
		else if (height > (partH * 2)) {

			currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)x, (f32)y, (f32)sprite->sizeX, (f32)partH);
			currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY, sprite->uvSizeX, partUVH);
			glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

			currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)x, (f32)(y + height - partH), (f32)sprite->sizeX, (f32)partH);
			currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY + sprite->uvSizeY - partUVH, sprite->uvSizeX, partUVH);
			glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

			currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)x, (f32)(y + partH), (f32)sprite->sizeX, (f32)(height - (partH * 2)));
			currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY + partUVH, sprite->uvSizeX, partUVH);
			glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		}
		else {

			s32 halfHUp = (height / 2);
			s32 halfHDown = (height - halfHUp);

			f32 halfUVHUp = ((f32)halfHUp / (f32)sprite->sizeY) * sprite->uvSizeY;
			f32 halfUVHDown = ((f32)halfHDown / (f32)sprite->sizeY) * sprite->uvSizeY;

			currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)x, (f32)y, (f32)sprite->sizeX, (f32)halfHUp);
			currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY, sprite->uvSizeX, halfUVHUp);
			glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

			currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)x, (f32)(y + halfHUp), (f32)sprite->sizeX, (f32)halfHDown);
			currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY + sprite->uvSizeY - halfUVHDown, sprite->uvSizeX, halfUVHDown);
			glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		}

	}

	void Renderer::render9PRepeat(const char* _spriteName, s32 _index, s32 _x, s32 _y, s32 _width, s32 _height, f32 _alpha) {
		if (ResourceManager::getTextureAtlas() == nullptr) return;
		render9PRepeat(ResourceManager::getTextureAtlas()->getTextureAtlasSprite(_spriteName), _index, _x, _y, _width, _height, _alpha);
	}

	void Renderer::render9PRepeat(Sprite* _sprite, s32 _index, s32 _x, s32 _y, s32 _width, s32 _height, f32 _alpha) {

		if (_sprite == nullptr) {

			ZIXEL_WARN("Error in Renderer::render9PRepeat. '_sprite' is null.");
			return;

		}

		if (_index < 0 || _index >= _sprite->subSpriteList.size()) {

			ZIXEL_WARN("Error in Renderer::render9PRepeat. Sub-sprite index ({}) out of range. Valid range: 0 - {}.", _index, _sprite->subSpriteList.size() - 1);
			_index = 0;

		}

		if (_width <= 0 || _height <= 0) return;

		SubSprite* sub = _sprite->subSpriteList[_index];

		s32 partW = _sprite->sizeX / 3;
		s32 partH = _sprite->sizeY / 3;
		f32 partUVW = _sprite->uvSizeX / 3.0f;
		f32 partUVH = _sprite->uvSizeY / 3.0f;

		s32 actualPartW1 = partW, actualPartH1 = partH, actualPartW2 = partW, actualPartH2 = partH;
		f32 actualPartUVW1 = partUVW, actualPartUVH1 = partUVH, actualPartUVW2 = partUVW, actualPartUVH2 = partUVH;

		if (_width < (partW * 2)) {

			f32 halfW = (f32)_width * 0.5f;
			actualPartW1 = (s32)floorf(halfW) + ((s32)ceilf(halfW) != (s32)floorf(halfW));
			actualPartW2 = (s32)floorf(halfW);

			actualPartUVW1 = ((f32)actualPartW1 / (f32)partW) * partUVW;
			actualPartUVW2 = ((f32)actualPartW2 / (f32)partW) * partUVW;

		}

		if (_height < (partH * 2)) {

			f32 halfH = (f32)_height * 0.5f;
			actualPartH1 = (s32)floorf(halfH) + ((s32)ceilf(halfH) != (s32)floorf(halfH));
			actualPartH2 = (s32)floorf(halfH);

			actualPartUVH1 = ((f32)actualPartH1 / (f32)partH) * partUVH;
			actualPartUVH2 = ((f32)actualPartH2 / (f32)partH) * partUVH;
		}

		currentShader->setUniformBool(currentShader->uniformHasTexture, true);
		currentShader->setUniform4f(currentShader->uniformBlend, 1.0f, 1.0f, 1.0f, _alpha);

		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x, (f32)_y, (f32)actualPartW1, (f32)actualPartH1); //Top-left.
		currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY, actualPartUVW1, actualPartUVH1);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x + (f32)_width - (f32)actualPartW2, (f32)_y, (f32)actualPartW2, (f32)actualPartH1); //Top-right.
		currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + _sprite->uvSizeX - actualPartUVW2, sub->textureAtlasUVY, actualPartUVW2, actualPartUVH1);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x, (f32)_y + (f32)_height - (f32)actualPartH2, (f32)actualPartW1, (f32)actualPartH2); //Bottom-left.
		currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY + _sprite->uvSizeY - actualPartUVH2, actualPartUVW1, actualPartUVH2);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x + (f32)_width - (f32)actualPartW2, (f32)_y + (f32)_height - (f32)actualPartH2, (f32)actualPartW2, (f32)actualPartH2); //Bottom-right.
		currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + _sprite->uvSizeX - actualPartUVW2, sub->textureAtlasUVY + _sprite->uvSizeY - actualPartUVH2, actualPartUVW2, actualPartUVH2);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		if (_width > (partW * 2)) {

			s32 lenW = (_width - (partW * 2));
			s32 numHor = (lenW / partW);

			for (s32 i = 0; i < numHor; ++i) {

				currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x + (f32)partW + ((f32)partW * (f32)i), (f32)_y, (f32)partW, (f32)actualPartH1); //Top-middle.
				currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + partUVW, sub->textureAtlasUVY, partUVW, actualPartUVH1);
				glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

				currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x + (f32)partW + ((f32)partW * (f32)i), (f32)_y + (f32)_height - (f32)actualPartH2, (f32)partW, (f32)actualPartH2); //Bottom-middle.
				currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + partUVW, sub->textureAtlasUVY + _sprite->uvSizeY - actualPartUVH2, partUVW, actualPartUVH2);
				glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

			}

			s32 deltaW = lenW - (numHor * partW);
			if (deltaW > 0) {

				f32 tempUVW = ((f32)deltaW / (f32)partW) * partUVW;

				currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x + (f32)partW + (f32)lenW - deltaW, (f32)_y, (f32)deltaW, (f32)actualPartH1); //Top-middle fraction.
				currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + partUVW, sub->textureAtlasUVY, tempUVW, actualPartUVH1);
				glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

				currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x + (f32)partW + (f32)lenW - deltaW, (f32)_y + (f32)_height - (f32)actualPartH2, (f32)deltaW, (f32)actualPartH2); //Bottom-middle fraction.
				currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + partUVW, sub->textureAtlasUVY + _sprite->uvSizeY - actualPartUVH2, tempUVW, actualPartUVH2);
				glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

			}

			if (_height > (partH * 2)) {

				s32 lenH = (_height - (partH * 2));
				s32 numVer = (lenH / partH);

				for (s32 i = 0; i < numHor; ++i) {
					for (s32 j = 0; j < numVer; ++j) {

						currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x + (f32)partW + ((f32)partW * (f32)i), (f32)_y + (f32)partH + ((f32)partH * (f32)j), (f32)partW, (f32)partH); //Center.
						currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + partUVW, sub->textureAtlasUVY + partUVH, partUVW, partUVH);
						glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

					}

				}

				s32 deltaH = lenH - (numVer * partH);

				if (deltaW > 0) {

					f32 tempUVW = ((f32)deltaW / (f32)partW) * partUVW;
					f32 tempUVH = ((f32)deltaH / (f32)partH) * partUVH;

					for (s32 i = 0; i < numVer; ++i) {

						currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x + (f32)partW + (f32)lenW - deltaW, (f32)_y + (f32)partH + ((f32)partH * (f32)i), (f32)deltaW, (f32)partH); //Center-right fraction.
						currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + partUVW, sub->textureAtlasUVY + partUVH, tempUVW, partUVH);
						glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

					}

					if (deltaH > 0) {

						currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x + (f32)partW + (f32)lenW - deltaW, (f32)_y + (f32)partH + (f32)lenH - deltaH, (f32)deltaW, (f32)deltaH); //Bottom-right center fraction.
						currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + partUVW, sub->textureAtlasUVY + partUVH, tempUVW, tempUVH);
						glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

					}

				}

				if (deltaH > 0) {

					f32 tempUVH = ((f32)deltaH / (f32)partH) * partUVH;

					for (s32 i = 0; i < numHor; ++i) {

						currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x + (f32)partW + ((f32)partW * (f32)i), (f32)_y + (f32)partH + (f32)lenH - deltaH, (f32)partW, (f32)deltaH); //Center-bottom fraction.
						currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + partUVW, sub->textureAtlasUVY + partUVH, partUVW, tempUVH);
						glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

					}

				}

			}

		}

		if (_height > (partH * 2)) {

			s32 lenH = (_height - (partH * 2));
			s32 numVer = (lenH / partH);

			for (s32 j = 0; j < numVer; ++j) {

				currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x, (f32)_y + (f32)partH + ((f32)partH * (f32)j), (f32)actualPartW1, (f32)partH); //Left-middle.
				currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY + partUVH, actualPartUVW1, partUVH);
				glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

				currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x + (f32)_width - (f32)actualPartW2, (f32)_y + (f32)partH + ((f32)partH * (f32)j), (f32)actualPartW2, (f32)partH); //Right-middle.
				currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + _sprite->uvSizeX - actualPartUVW2, sub->textureAtlasUVY + partUVH, actualPartUVW2, partUVH);
				glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

			}

			s32 deltaH = lenH - (numVer * partH);
			if (deltaH > 0) {

				f32 tempUVH = ((f32)deltaH / (f32)partH) * partUVH;

				currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x, (f32)_y + (f32)partH + (f32)lenH - deltaH, (f32)actualPartW1, (f32)deltaH); //Left-middle fraction.
				currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX, sub->textureAtlasUVY + partUVH, actualPartUVW1, tempUVH);
				glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

				currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x + (f32)_width - (f32)actualPartW2, (f32)_y + (f32)partH + (f32)lenH - deltaH, (f32)actualPartW2, (f32)deltaH); //Right-middle fraction.
				currentShader->setUniform4f(currentShader->uniformAtlasUV, sub->textureAtlasUVX + _sprite->uvSizeX - actualPartUVW2, sub->textureAtlasUVY + partUVH, actualPartUVW2, tempUVH);
				glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

			}

		}

	}

	void Renderer::renderText(const char* fontName, std::string& text, s32 x, s32 y, TextAlign hAlign, TextAlign vAlign, Color4f color) {
		if (ResourceManager::getTextureAtlas() == nullptr) return;
		renderText(ResourceManager::getTextureAtlas()->getTextureAtlasFont(fontName), text, x, y, hAlign, vAlign, color);
	}

	void Renderer::renderText(Font* font, std::string& text, s32 x, s32 y, TextAlign hAlign, TextAlign vAlign, Color4f color) {

		if (font == nullptr) {

			ZIXEL_WARN("Error in Renderer::renderText. '_font' is null.");
			return;

		}

		if (text == "") return;
		
		s32 drawX = x;
		s32 drawY = y;

		std::vector<s32> lineData;

		s32 curWidth = 0;
		s32 lineHeight = 0;
		s32 lineCount = 1;

		bool shouldPrint = (text == "He had told her that you don't show the world what you're made of when they are all watching, you show that in your actions when nobody was looking.");

		for (size_t i = 0; i < text.length(); ++i) {

			char& c = text[i];

			if (c == '\n') {

				if (hAlign == TextAlign::Center) {
					lineData.push_back(curWidth / 2);
				}
				else if (hAlign == TextAlign::Right) {
					lineData.push_back(curWidth);
				}

				curWidth = 0;

				++lineCount;

				continue;

			}

			if (c == '\t') {

				size_t ind = (size_t)' ';
				if (ind >= font->glyphs.size()) continue;

				FontGlyph* space = font->glyphs[ind];

				curWidth += (space->advanceX * 4);

				continue;

			}

			if (c == ' ') {

				size_t ind = (size_t)' ';
				if (ind >= font->glyphs.size()) continue;

				FontGlyph* space = font->glyphs[ind];

				curWidth += space->advanceX;

				continue;

			}

			size_t ind = (size_t)c;
			if (ind >= font->glyphs.size()) {

				ind = (size_t)'?';
				if (ind >= font->glyphs.size()) continue;

			}

			FontGlyph* glyph = font->glyphs[ind];

			curWidth += glyph->advanceX;//(i == text.size() - 1 || text[i + 1] == '\n') ? glyph->sizeX : glyph->advanceX;

			if (glyph->bearingY > lineHeight) {
				lineHeight = glyph->bearingY;
			}

		}
			
		if (hAlign == TextAlign::Center) {
			lineData.push_back(curWidth / 2);
		}
		else if (hAlign == TextAlign::Right) {
			lineData.push_back(curWidth);
		}
		else {
			lineData.push_back(0);
		}

		if (lineHeight == 0) {
			lineHeight = font->height;
		}

		s32 offY = 0;
		if (vAlign == TextAlign::Middle) {
			offY = (lineCount * font->advanceY) / 2;
		}
		else if (vAlign == TextAlign::Bottom) {
			offY = (lineCount * font->advanceY);
		}

		currentShader->setUniformBool(currentShader->uniformHasTexture, true);
		currentShader->setUniform4f(currentShader->uniformBlend, color.r, color.g, color.b, color.a);

		s32 curLine = 0;

		for (auto& c : text) {

			if (c == '\n') {

				drawX = x;
				drawY += font->advanceY;

				++curLine;

				continue;

			}

			if (c == '\t') {

				size_t ind = (size_t)' ';
				if (ind >= font->glyphs.size()) continue;

				FontGlyph* space = font->glyphs[ind];
				drawX += space->advanceX * 4;

				continue;

			}

			if (c == ' ') {

				size_t ind = (size_t)' ';
				if (ind >= font->glyphs.size()) continue;

				FontGlyph* space = font->glyphs[ind];
				drawX += space->advanceX;

				continue;

			}

			size_t ind = (size_t)c;
			if (ind >= font->glyphs.size()) {

				ind = (size_t)'?';
				if (ind >= font->glyphs.size()) continue;

			}

			FontGlyph* glyph = font->glyphs[ind];

			if (glyph->drawable) {

				currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)(drawX + glyph->bearingX - lineData[curLine % lineData.size()]), (f32)(drawY - glyph->bearingY + font->height - offY - 1), (f32)glyph->sizeX, (f32)glyph->sizeY);
				currentShader->setUniform4f(currentShader->uniformAtlasUV, glyph->textureAtlasUVX, glyph->textureAtlasUVY, glyph->uvSizeX, glyph->uvSizeY);

				glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

			}

			drawX += glyph->advanceX;

		}

	}

	void Renderer::renderText(Font* font, UTF8String& text, s32 x, s32 y, TextAlign hAlign, TextAlign vAlign, Color4f color) {

		if (font == nullptr) {

			ZIXEL_WARN("Error in Renderer::renderText. '_font' is null.");
			return;

		}

		if (text == "") return;

		s32 drawX = x;
		s32 drawY = y;

		std::vector<s32> lineData;

		s32 curWidth = 0;
		s32 lineHeight = 0;
		s32 lineCount = 1;

		bool shouldPrint = (text == "He had told her that you don't show the world what you're made of when they are all watching, you show that in your actions when nobody was looking.");

		u32 c;
		for (size_t i = 0; i < text.length(); ++i) {

			c = text[i];

			if (c == '\n') {

				if (hAlign == TextAlign::Center) {
					lineData.push_back(curWidth / 2);
				}
				else if (hAlign == TextAlign::Right) {
					lineData.push_back(curWidth);
				}

				curWidth = 0;

				++lineCount;

				continue;

			}

			if (c == '\t') {

				size_t ind = (size_t)' ';
				if (ind >= font->glyphs.size()) continue;

				FontGlyph* space = font->glyphs[ind];

				curWidth += (space->advanceX * 4);

				continue;

			}

			if (c == ' ') {

				size_t ind = (size_t)' ';
				if (ind >= font->glyphs.size()) continue;

				FontGlyph* space = font->glyphs[ind];

				curWidth += space->advanceX;

				continue;

			}

			size_t ind = (size_t)c;
			
			if (ind >= font->glyphs.size()) {
				
				ind = (size_t)'?';
				if (ind >= font->glyphs.size()) continue;

			}

			FontGlyph* glyph = font->glyphs[ind];

			curWidth += glyph->advanceX;//(i == text.size() - 1 || text[i + 1] == '\n') ? glyph->sizeX : glyph->advanceX;

			if (glyph->bearingY > lineHeight) {
				lineHeight = glyph->bearingY;
			}

		}

		if (hAlign == TextAlign::Center) {
			lineData.push_back(curWidth / 2);
		}
		else if (hAlign == TextAlign::Right) {
			lineData.push_back(curWidth);
		}
		else {
			lineData.push_back(0);
		}

		if (lineHeight == 0) {
			lineHeight = font->height;
		}

		s32 offY = 0;
		if (vAlign == TextAlign::Middle) {
			offY = (lineCount * font->advanceY) / 2;
		}
		else if (vAlign == TextAlign::Bottom) {
			offY = (lineCount * font->advanceY);
		}

		currentShader->setUniformBool(currentShader->uniformHasTexture, true);
		currentShader->setUniform4f(currentShader->uniformBlend, color.r, color.g, color.b, color.a);

		s32 curLine = 0;

		for (auto& c : text) {

			if (c == '\n') {

				drawX = x;
				drawY += font->advanceY;

				++curLine;

				continue;

			}

			if (c == '\t') {

				size_t ind = (size_t)' ';
				if (ind >= font->glyphs.size()) continue;

				FontGlyph* space = font->glyphs[ind];
				drawX += space->advanceX * 4;

				continue;

			}

			if (c == ' ') {

				size_t ind = (size_t)' ';
				if (ind >= font->glyphs.size()) continue;

				FontGlyph* space = font->glyphs[ind];
				drawX += space->advanceX;

				continue;

			}

			size_t ind = (size_t)c;
			if (ind >= font->glyphs.size()) {

				ind = (size_t)'?';
				if (ind >= font->glyphs.size()) continue;

			}

			FontGlyph* glyph = font->glyphs[ind];

			if (glyph->drawable) {

				currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)(drawX + glyph->bearingX - lineData[curLine % lineData.size()]), (f32)(drawY - glyph->bearingY + font->height - offY - 1), (f32)glyph->sizeX, (f32)glyph->sizeY);
				currentShader->setUniform4f(currentShader->uniformAtlasUV, glyph->textureAtlasUVX, glyph->textureAtlasUVY, glyph->uvSizeX, glyph->uvSizeY);

				glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

			}

			drawX += glyph->advanceX;

		}

	}

	void Renderer::renderSurface(Surface* _surface, s32 _x, s32 _y, f32 _alpha) {

		if (_surface == nullptr) {

			ZIXEL_WARN("Error in Renderer::renderSurface. '_surface' is null.");
			return;

		}

		if (!_surface->created) {

			ZIXEL_WARN("Error in Renderer::renderSurface. Surface has not been initialized properly.");
			return;

		}

		currentShader->setUniformBool(currentShader->uniformHasTexture, true);
		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x, (f32)_y, (f32)_surface->width, (f32)_surface->height);
		currentShader->setUniform4f(currentShader->uniformAtlasUV, 0.0f, 0.0f, 1.0f, 1.0f);
		currentShader->setUniform4f(currentShader->uniformBlend, 1.0f, 1.0f, 1.0f, _alpha);

		glBindTexture(GL_TEXTURE_2D, _surface->tex);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
		glBindTexture(GL_TEXTURE_2D, (ResourceManager::getTextureAtlas() != nullptr) ? ResourceManager::getTextureAtlas()->getTexture()->getId() : 0);

	}

	void Renderer::renderSurfaceStretched(Surface* _surface, s32 _x, s32 _y, s32 _width, s32 _height, f32 _alpha) {

		if (_surface == nullptr) {

			ZIXEL_WARN("Error in Renderer::renderSurfaceStretched. '_surface' is null.");
			return;

		}

		if (!_surface->created) {

			ZIXEL_WARN("Error in Renderer::renderSurfaceStretched. Surface has not been initialized properly.");
			return;

		}

		if (_width <= 0 || _height <= 0) {
			return;
		}

		currentShader->setUniformBool(currentShader->uniformHasTexture, true);
		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x, (f32)_y, (f32)_width, (f32)_height);
		currentShader->setUniform4f(currentShader->uniformAtlasUV, 0.0f, 0.0f, 1.0f, 1.0f);
		currentShader->setUniform4f(currentShader->uniformBlend, 1.0f, 1.0f, 1.0f, _alpha);

		glBindTexture(GL_TEXTURE_2D, _surface->tex);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
		glBindTexture(GL_TEXTURE_2D, (ResourceManager::getTextureAtlas() != nullptr) ? ResourceManager::getTextureAtlas()->getTexture()->getId() : 0);

	}

	void Renderer::renderRect(s32 _x, s32 _y, s32 _width, s32 _height, Color4f color) {

		if (_width <= 0 || _height <= 0) {
			return;
		}

		currentShader->setUniformBool(currentShader->uniformHasTexture, false);
		currentShader->setUniform4f(currentShader->uniformQuadPos, (f32)_x, (f32)_y, (f32)_width, (f32)_height);
		currentShader->setUniform4f(currentShader->uniformBlend, color.r, color.g, color.b, color.a);

		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

	}

	void Renderer::renderRectOutline(s32 _x, s32 _y, s32 _width, s32 _height, s32 _outlineWidth, Color4f color) {

		if (_width <= 0 || _height <= 0) {
			return;
		}

		s32 oddWidth = (_width % 2);
		s32 maxWidth = Math::minInt(_outlineWidth, (_width / 2) + oddWidth);

		for (s32 i = 0; i < maxWidth; ++i) {
			
			s32 lineHeight = _height - (i * 2);

			if (lineHeight <= 0) {
				break;
			}

			renderRect(_x + i, _y + i, 1, lineHeight, color);

			if (i == maxWidth - 1 && oddWidth && maxWidth == (_width / 2) + 1) {
				break;
			}

			renderRect(_x + _width - 1 - i, _y + i, 1, lineHeight, color);

		}

		s32 oddHeight = (_height % 2);
		s32 maxHeight = Math::minInt(_outlineWidth, (_height / 2) + oddHeight);

		for (s32 i = 0; i < maxHeight; ++i) {

			s32 lineWidth = _width - 2 - (i * 2);

			if (lineWidth <= 0) {
				break;
			}

			renderRect(_x + i + 1, _y + i, lineWidth, 1, color);

			if (i == maxHeight - 1 && oddHeight && maxHeight == (_height / 2) + 1) {
				break;
			}

			renderRect(_x + i + 1, _y + _height - 1 - i, lineWidth, 1, color);

		}

	}

}